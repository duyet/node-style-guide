{"name":"Node-style-guide","tagline":"A guide for styling your node.js / JavaScript code. How duyetdev write Nodejs. Fork & adjust to your taste.","body":"# Node.js Style Guide\r\nThis is a guide for writing consistent and aesthetically pleasing node.js code. It is inspired by what is popular within the community, and flavored with some personal opinions.\r\n\r\n# Table of contents\r\n\r\n* [1 Tab for indention](#1-tab-for-indention)\r\n* [Newlines](#newlines)\r\n* [Use Semicolons](#use-semicolons)\r\n* [80 characters per line](#80-characters-per-line)\r\n* [Use single quotes](#use-single-quotes)\r\n* [Opening braces go on the same line](#opening-braces-go-on-the-same-line)\r\n* [Method chaining](#method-chaining)\r\n* [Functions](#functions)\r\n* [Requires](#requires)\r\n* [Always check for errors in callbacks](#always-check-for-errors-in-callbacks)\r\n* [Only throw in synchronous functions](#only-throw-in-synchronous-functions)\r\n* [Catch errors in sync calls](#catch-errors-in-sync-calls)\r\n* [Use FIXME: and TODO: comment to annotate problems](#use-fixme-and-todo-comment-to-annotate-problems)\r\n* [Whitespace rightway](#whitespace-rightway)\r\n* [Declare one variable per var statement](#declare-one-variable-per-var-statement)\r\n* [Use lowerCamelCase for variables, properties and function names](#use-lowercamelcase-for-variables-properties-and-function-names)\r\n* [Use UpperCamelCase for class names](#use-uppercamelcase-for-class-names)\r\n* [Use UPPERCASE for Constants](#use-uppercase-for-constants)\r\n* [Object / Array creation](#object--array-creation)\r\n* [Use the === operator](#use-the--operator)\r\n* [Use multi-line ternary operator](#use-multi-line-ternary-operator)\r\n* [Use slashes for comments](#use-slashes-for-comments)\r\n* [Object.freeze, Object.preventExtensions, Object.seal, with, eval](#objectfreeze-objectpreventextensions-objectseal-with-eval)\r\n* [Getters and setters](#getters-and-setters)\r\n\r\n## 1 Tab for indention\r\n\r\nUse 1 tab character for indenting your code and swear an oath to never mix tabs and spaces - a special kind of hell is awaiting you otherwise.\r\n\r\n## Newlines\r\n\r\nUse UNIX-style newlines (`\\n`), and a newline character as the last character \r\nof a file. Windows-style newlines (`\\r\\n`) are forbidden inside any repository.\r\n\r\n## Use Semicolons\r\n\r\nAccording to [scientific research][hnsemicolons], the usage of semicolons is\r\na core value of our community. Consider the points of [the opposition][], but\r\nbe a traditionalist when it comes to abusing error correction mechanisms for\r\ncheap syntactic pleasures.\r\n\r\n[the opposition]: http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\r\n[hnsemicolons]: http://news.ycombinator.com/item?id=1547647\r\n\r\n## 80 characters per line\r\n\r\nLimit your lines to 80 characters. Yes, screens have gotten much bigger over the\r\nlast few years, but your brain has not. Use the additional room for split screen,\r\nyour editor supports that, right?\r\n\r\n## Use single quotes\r\n\r\nUse single quotes, unless you are writing JSON.\r\n\r\n*Right:*\r\n\r\n```js\r\nvar foo = 'bar';\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nvar foo = \"bar\";\r\n```\r\n\r\n## Opening braces go on the same line\r\n\r\nYour opening braces go on the same line as the statement.\r\n\r\n*Right:*\r\n\r\n```js\r\nif (true) {\r\n  console.log('winning');\r\n}\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nif (true)\r\n{\r\n  console.log('losing');\r\n}\r\n```\r\n\r\nAlso, notice the use of whitespace before and after the condition statement.\r\n\r\n## Method chaining\r\n\r\nOne method per line should be used if you want to chain methods.\r\n\r\nYou should also indent these methods so it's easier to tell they are part of the same chain.\r\n\r\n*Right:*\r\n\r\n```js\r\nUser\r\n  .findOne({ name: 'foo' })\r\n  .populate('bar')\r\n  .exec(function(err, user) {\r\n    return true;\r\n  });\r\n````\r\n\r\n*Wrong:*\r\n\r\n```js\r\nUser\r\n.findOne({ name: 'foo' })\r\n.populate('bar')\r\n.exec(function(err, user) {\r\n  return true;\r\n});\r\n\r\nUser.findOne({ name: 'foo' })\r\n  .populate('bar')\r\n  .exec(function(err, user) {\r\n    return true;\r\n  });\r\n\r\nUser.findOne({ name: 'foo' }).populate('bar')\r\n.exec(function(err, user) {\r\n  return true;\r\n});\r\n\r\nUser.findOne({ name: 'foo' }).populate('bar')\r\n  .exec(function(err, user) {\r\n    return true;\r\n  });\r\n````\r\n\r\n## Functions\r\n\r\n* Function expressions:\r\n```js\r\n// anonymous function expression\r\nvar anonymous = function() {\r\n  return true;\r\n};\r\n\r\n// named function expression\r\nvar named = function named() {\r\n  return true;\r\n};\r\n\r\n// immediately-invoked function expression (IIFE)\r\n(function() {\r\n  console.log('Welcome to the Internet. Please follow me.');\r\n})();\r\n```\r\n\r\n* Never declare a function in a non-function block (if, while, etc). Assign the function to a variable instead.\r\n```js\r\n// bad\r\nif (currentUser) {\r\n  function test() {\r\n    console.log('Nope.');\r\n  }\r\n}\r\n\r\n// good\r\nvar test;\r\nif (currentUser) {\r\n  test = function test() {\r\n    console.log('Yup.');\r\n  };\r\n}\r\n```\r\n\r\n* Never name a parameter arguments, this will take precedence over the arguments object that is given to every function scope.\r\n```js\r\n// bad\r\nfunction nope(name, options, arguments) {\r\n  // ...stuff...\r\n}\r\n\r\n// good\r\nfunction yup(name, options, args) {\r\n  // ...stuff...\r\n}\r\n```\r\n\r\n## Requires\r\n* Organize your node requires in the following order:\r\n  * core modules  \r\n  * npm modules\r\n  * others\r\n  \r\n```js\r\n// good\r\nvar http = require('http');\r\nvar fs = require('fs');\r\n\r\nvar async = require('async');\r\nvar mongoose = require('mongoose');\r\n\r\nvar Car = require('./models/Car');\r\n\r\n\r\n// bad\r\nvar Car = require('./models/Car');\r\nvar async = require('async');\r\nvar http = require('http');\r\n```\r\n* Do not use the .js when requiring modules\r\n```js\r\n  // bad\r\n  var Batmobil = require('./models/Car.js');\r\n\r\n  // good\r\n  var Batmobil = require('./models/Car');\r\n```\r\n\r\n## Declare one variable per var statement\r\n\r\nDeclare one variable per var statement, it makes it easier to re-order the\r\nlines. However, ignore [Crockford][crockfordconvention] when it comes to\r\ndeclaring variables deeper inside a function, just put the declarations wherever\r\nthey make sense.\r\n\r\n*Right:*\r\n\r\n```js\r\nvar keys   = ['foo', 'bar'];\r\nvar values = [23, 42];\r\n\r\nvar object = {};\r\nwhile (keys.length) {\r\n  var key = keys.pop();\r\n  object[key] = values.pop();\r\n}\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nvar keys = ['foo', 'bar'],\r\n    values = [23, 42],\r\n    object = {},\r\n    key;\r\n\r\nwhile (keys.length) {\r\n  key = keys.pop();\r\n  object[key] = values.pop();\r\n}\r\n```\r\n\r\n[crockfordconvention]: http://javascript.crockford.com/code.html\r\n\r\n## Always check for errors in callbacks\r\n\r\nAlways check for errors and return if any errors in callbacks\r\n\r\n```js\r\n//bad\r\ndatabase.get('pokemons', function(err, pokemons) {\r\n  console.log(pokemons);\r\n});\r\n\r\n//good\r\ndatabase.get('drabonballs', function(err, drabonballs) {\r\n  if (err) {\r\n    // handle the error somehow, maybe return with a callback\r\n    return console.log(err);\r\n  }\r\n  console.log(drabonballs);\r\n});\r\n```\r\n\r\n## Only throw in synchronous functions\r\n\r\nTry-catch blocks cannot be used to wrap async code. They will bubble up to to the top, and bring down the entire process.\r\n\r\n```js\r\n//bad\r\nfunction readPackageJson (callback) {\r\n  fs.readFile('package.json', function(err, file) {\r\n    if (err) {\r\n      throw err;\r\n    }\r\n    ...\r\n  });\r\n}\r\n\r\n//good\r\nfunction readPackageJson (callback) {\r\n  fs.readFile('package.json', function(err, file) {\r\n    if (err) {\r\n      // Return the callback error\r\n      return  callback(err);\r\n    }\r\n    ...\r\n  });\r\n}\r\n```\r\n\r\n## Catch errors in sync calls\r\n\r\n```js\r\n//bad\r\nvar data = JSON.parse(jsonAsAString);\r\n\r\n//good\r\nvar data;\r\ntry {\r\n  data = JSON.parse(jsonAsAString);\r\n} catch (e) {\r\n  //handle error - hopefully not with a console.log ;)\r\n  console.log(e);\r\n}\r\n```\r\n\r\n## Use **FIXME:** and **TODO:** comment to annotate problems\r\n\r\nPrefixing your comments with **FIXME** or **TODO** helps other developers quickly understand if you're pointing out a problem that needs to be revisited, or if you're suggesting a solution to the problem that needs to be implemented.\r\n\r\n* Use `// FIXME:` to annotate problems\r\n\r\n```js\r\nfunction Calculator() {\r\n\r\n  // FIXME: shouldn't use a global here\r\n  total = 0;\r\n\r\n  return this;\r\n}\r\n```\r\n\r\n* Use `// TODO:` to annotate solutions to problems\r\n\r\n```js \r\nfunction Calculator() {\r\n\r\n  // TODO: total should be configurable by an options param\r\n  this.total = 0;\r\n\r\n  return this;\r\n}\r\n```\r\n\r\n## Whitespace rightway\r\n\r\n* Use soft tabs set to 2 spaces\r\n\r\n```js\r\n// bad\r\nfunction() {\r\n∙∙∙∙var name;\r\n}\r\n\r\n// bad\r\nfunction() {\r\n∙var name;\r\n}\r\n\r\n// good\r\nfunction() {\r\n∙∙var name;\r\n}\r\n```\r\n\r\n* Place 1 space before the leading brace.\r\n\r\n```js\r\n// bad\r\nfunction test(){\r\n  console.log('test');\r\n}\r\n\r\n// good\r\nfunction test() {\r\n  console.log('test');\r\n}\r\n\r\n// bad\r\ndog.set('attr',{\r\n  age: '1 year',\r\n  breed: 'Bernese Mountain Dog'\r\n});\r\n\r\n// good\r\ndog.set('attr', {\r\n  age: '1 year',\r\n  breed: 'Bernese Mountain Dog'\r\n});\r\n```\r\n\r\n* Set off operators with spaces.\r\n\r\n```js\r\n// bad\r\nvar x=y+5;\r\n\r\n// good\r\nvar x = y + 5;\r\n```\r\n\r\n* End files with a single newline character.\r\n\r\n```js\r\n// bad\r\n(function(global) {\r\n  // ...stuff...\r\n})(this);\r\n\r\n// bad\r\n(function(global) {\r\n  // ...stuff...\r\n})(this);↵\r\n↵\r\n\r\n// good\r\n(function(global) {\r\n  // ...stuff...\r\n})(this);↵\r\n```\r\n\r\n## Use lowerCamelCase for variables, properties and function names\r\n\r\nVariables, properties and function names should use `lowerCamelCase`.  They\r\nshould also be descriptive. Single character variables and uncommon\r\nabbreviations should generally be avoided.\r\n\r\n*Right:*\r\n\r\n```js\r\nvar adminUser = db.query('SELECT * FROM users ...');\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nvar admin_user = db.query('SELECT * FROM users ...');\r\n```\r\n\r\n## Use UpperCamelCase for class names\r\n\r\nClass names should be capitalized using `UpperCamelCase`.\r\n\r\n*Right:*\r\n\r\n```js\r\nfunction BankAccount() {\r\n}\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nfunction bank_Account() {\r\n}\r\n```\r\n\r\n## Use UPPERCASE for Constants\r\n\r\nConstants should be declared as regular variables or static class properties,\r\nusing all uppercase letters.\r\n\r\nNode.js / V8 actually supports mozilla's [const][const] extension, but\r\nunfortunately that cannot be applied to class members, nor is it part of any\r\nECMA standard.\r\n\r\n*Right:*\r\n\r\n```js\r\nvar SECOND = 1 * 1000;\r\n\r\nfunction File() {\r\n}\r\nFile.FULL_PERMISSIONS = 0777;\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nconst SECOND = 1 * 1000;\r\n\r\nfunction File() {\r\n}\r\nFile.fullPermissions = 0777;\r\n```\r\n\r\n[const]: https://developer.mozilla.org/en/JavaScript/Reference/Statements/const\r\n\r\n## Object / Array creation\r\n\r\nUse trailing commas and put *short* declarations on a single line. Only quote\r\nkeys when your interpreter complains:\r\n\r\n*Right:*\r\n\r\n```js\r\nvar a = ['hello', 'world'];\r\nvar b = {\r\n  good: 'code',\r\n  'is generally': 'pretty',\r\n};\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nvar a = [\r\n  'hello', 'world'\r\n];\r\nvar b = {\"good\": 'code'\r\n        , is generally: 'pretty'\r\n        };\r\n```\r\n\r\n## Use the === operator\r\n\r\nProgramming is not about remembering [stupid rules][comparisonoperators]. Use\r\nthe triple equality operator as it will work just as expected.\r\n\r\n*Right:*\r\n\r\n```js\r\nvar a = 0;\r\nif (a !== '') {\r\n  console.log('winning');\r\n}\r\n\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nvar a = 0;\r\nif (a == '') {\r\n  console.log('losing');\r\n}\r\n```\r\n\r\n[comparisonoperators]: https://developer.mozilla.org/en/JavaScript/Reference/Operators/Comparison_Operators\r\n\r\n## Use multi-line ternary operator\r\n\r\nThe ternary operator should not be used on a single line. Split it up into multiple lines instead.\r\n\r\n*Right:*\r\n\r\n```js\r\nvar foo = (a === b)\r\n  ? 1\r\n  : 2;\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nvar foo = (a === b) ? 1 : 2;\r\n```\r\n\r\n## Do not extend built-in prototypes\r\n\r\nDo not extend the prototype of native JavaScript objects. Your future self will\r\nbe forever grateful.\r\n\r\n*Right:*\r\n\r\n```js\r\nvar a = [];\r\nif (!a.length) {\r\n  console.log('winning');\r\n}\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nArray.prototype.empty = function() {\r\n  return !this.length;\r\n}\r\n\r\nvar a = [];\r\nif (a.empty()) {\r\n  console.log('losing');\r\n}\r\n```\r\n\r\n## Use descriptive conditions\r\n\r\nAny non-trivial conditions should be assigned to a descriptively named variable or function:\r\n\r\n*Right:*\r\n\r\n```js\r\nvar isValidPassword = password.length >= 4 && /^(?=.*\\d).{4,}$/.test(password);\r\n\r\nif (isValidPassword) {\r\n  console.log('winning');\r\n}\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nif (password.length >= 4 && /^(?=.*\\d).{4,}$/.test(password)) {\r\n  console.log('losing');\r\n}\r\n```\r\n\r\n## Write small functions\r\n\r\nKeep your functions short. A good function fits on a slide that the people in\r\nthe last row of a big room can comfortably read. So don't count on them having\r\nperfect vision and limit yourself to ~15 lines of code per function.\r\n\r\n## Return early from functions\r\n\r\nTo avoid deep nesting of if-statements, always return a function's value as early\r\nas possible.\r\n\r\n*Right:*\r\n\r\n```js\r\nfunction isPercentage(val) {\r\n  if (val < 0) {\r\n    return false;\r\n  }\r\n\r\n  if (val > 100) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nfunction isPercentage(val) {\r\n  if (val >= 0) {\r\n    if (val < 100) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n```\r\n\r\nOr for this particular example it may also be fine to shorten things even\r\nfurther:\r\n\r\n```js\r\nfunction isPercentage(val) {\r\n  var isInRange = (val >= 0 && val <= 100);\r\n  return isInRange;\r\n}\r\n```\r\n\r\n## Name your closures\r\n\r\nFeel free to give your closures a name. It shows that you care about them, and\r\nwill produce better stack traces, heap and cpu profiles.\r\n\r\n*Right:*\r\n\r\n```js\r\nreq.on('end', function onEnd() {\r\n  console.log('winning');\r\n});\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nreq.on('end', function() {\r\n  console.log('losing');\r\n});\r\n```\r\n\r\n## No nested closures\r\n\r\nUse closures, but don't nest them. Otherwise your code will become a mess.\r\n\r\n*Right:*\r\n\r\n```js\r\nsetTimeout(function() {\r\n  client.connect(afterConnect);\r\n}, 1000);\r\n\r\nfunction afterConnect() {\r\n  console.log('winning');\r\n}\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\nsetTimeout(function() {\r\n  client.connect(function() {\r\n    console.log('losing');\r\n  });\r\n}, 1000);\r\n```\r\n\r\n## Use slashes for comments\r\n\r\nUse slashes for both single line and multi line comments. Try to write\r\ncomments that explain higher level mechanisms or clarify difficult\r\nsegments of your code. Don't use comments to restate trivial things.\r\n\r\n*Right:*\r\n\r\n```js\r\n// 'ID_SOMETHING=VALUE' -> ['ID_SOMETHING=VALUE', 'SOMETHING', 'VALUE']\r\nvar matches = item.match(/ID_([^\\n]+)=([^\\n]+)/));\r\n\r\n// This function has a nasty side effect where a failure to increment a\r\n// redis counter used for statistics will cause an exception. This needs\r\n// to be fixed in a later iteration.\r\nfunction loadUser(id, cb) {\r\n  // ...\r\n}\r\n\r\nvar isSessionValid = (session.expires < Date.now());\r\nif (isSessionValid) {\r\n  // ...\r\n}\r\n```\r\n\r\n*Wrong:*\r\n\r\n```js\r\n// Execute a regex\r\nvar matches = item.match(/ID_([^\\n]+)=([^\\n]+)/);\r\n\r\n// Usage: loadUser(5, function() { ... })\r\nfunction loadUser(id, cb) {\r\n  // ...\r\n}\r\n\r\n// Check if the session is valid\r\nvar isSessionValid = (session.expires < Date.now());\r\n// If the session is valid\r\nif (isSessionValid) {\r\n  // ...\r\n}\r\n```\r\n\r\n## Object.freeze, Object.preventExtensions, Object.seal, with, eval\r\n\r\nCrazy shit that you will probably never need. Stay away from it.\r\n\r\n## Getters and setters\r\n\r\nDo not use setters, they cause more problems for people who try to use your\r\nsoftware than they can solve.\r\n\r\nFeel free to use getters that are free from [side effects][sideeffect], like\r\nproviding a length property for a collection class.\r\n\r\n[sideeffect]: http://en.wikipedia.org/wiki/Side_effect_(computer_science)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}